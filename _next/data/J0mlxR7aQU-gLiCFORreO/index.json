{"pageProps":{"posts":[{"content":"\n<div class=\"alert alert-warning\">\nSpina has been updated a lot since I've written these articles. Commands may have changed since and I will do my best to write new articles on Spina soon !\n</div>\n\nHi, lately I have been working on a different project that no longer requires React — neither Javascript actually. It's a CMS built on Ruby on Rails, a kind of equivalent to Wordpress, called [Spina](http://www.spinacms.com/). It's new, it's open-source, it's ruby on rails and it's awesome !\n\nThe down-side of this project is that they don't really have any documentation yet. That's why I've decided to start writing about it and even contributed to their Wiki. As I am a front-end developer, I won't be able to talk about all the back-end ruby part. It's going to be mainly some front-end tips and instructions to get started with Spina. You won't find a lot of articles or tutorials about this, but the developers at Spina are very reactive and even opened a Slack channel to communicate with it's users !\n\nSo let's get started !\n\n## Installing Spina\n\nInstalling Spina is really easy, you only need 3 simple lines given in their [Github repo](https://github.com/denkGroot/Spina).\nAs it's a Ruby on Rails CMS, you obviously need to have a Rails app first.\n\nIf you do have Ruby on Rails working, simply create a new project.\n\n```Shell\nrails new MySpinaApp\n```\n\nThen add these lines to your `Gemfile`\n\n```Ruby\ngem 'spina-template'\ngem 'spina'\n```\n\nDon't forget to `bundle install` !\n\nAnd finally run the installation with the following command in your terminal and answer to the different questions that the command line asks you.\n\n```Shell\nrails g spina:install\n```\n\nNow if you run `rails s` and open up `localhost:3000` you should have your CMS running. If you want to go to the admin panel, just go to `localhost:3000/admin` and use the login you gave in the command line to log in !\n\n## Creating a Spina Theme\n\nAfter installing Spina, and if you chose to use the Demo theme, you will have two files in `config/initializers/themes`, a `default.rb` and a `demo.rb`. I recommend deleting these later, since it might through you an error since your pages are using one of these at the moment.\n\nThis is how our New page panel will look like for our Post page creation.\n\n![Spina Admin Panel](../static/spina-admin.png \"Spina Admin Panel\")\n\nYou can go and create a new file in this folder with your own theme name, I'll be calling it `labs.rb`.\n\nThen add the following by changing \"Labs\" by your theme name !\n\n```Ruby\nmodule Spina\n  module LabsTheme\n    include ::ActiveSupport::Configurable\n\n    config_accessor :title, :page_parts, :view_templates, :layout_parts, :custom_pages, :plugins, :structures\n\n    self.title = 'Labs'\n\n  end\nend\n\ntheme = Spina::Theme.new\ntheme.name = 'Labs'\ntheme.config = Spina::LabsTheme.config\nSpina.register_theme(theme)\n```\n\nOk so we now have our theme configured. However we need to add page_parts, templates and a custom page.\nThe following code snippets will go right after `self.title = 'Labs'`.\n\nLet's add some page_parts. If you look at the demo theme you can see 8 page_parts that are all the available page_parts on Spina (Line, Text, Photo, Photo collection, Attachment, Attachment collection, Structure and Color). In our case we are building a simple blog, therefore we only need 3 parts: an **excerpt** (Text), a **content** (Text) and a **thumbnail** (Photo).\n\n```Ruby\nself.page_parts = [\n  # Labs Page parts\n  { name: 'excerpt', title: 'Excerpt', page_partable_type: 'Spina::Text' },\n  { name: 'content', title: 'Content', page_partable_type: 'Spina::Text' },\n  { name: 'thumbnail', title: 'Thumbnail', page_partable_type: 'Spina::Photo' }\n]\n```\n\nFor our blog we will need 3 type of pages: a Homepage with the list of all our posts, a Post page and a Custom page for all the other static pages (i.e. an About page).\n\n```Ruby\nself.view_templates = {\n  'homepage' => { title:'Homepage', page_parts: %w(excerpt content) },\n  'show' => {\n    title: 'Default Post', description: 'A default post page', usage: 'Can be used for a blog post',\n    page_parts: %w(excerpt content thumbnail)\n  },\n  'page' => { title:'Custom Page', page_parts: %w(content) }\n}\n```\n<center><small><em>Writting `%w(excerpt thumbnail content)` is the same as writting `[\"excerpt\", \"thumbnail\", \"content\"]`. It's just a shortcut.</em></small></center>\n\nAnd finally we will add a custom_pages, that will be our Homepage. It seems to be a bug with Spina, but every time you update your Preferences, it regenerates all the defined custom_pages if they don't exist. And unfortunately I didn't manage to not to define any custom_pages. That's why we will only define the Homepage which will always be existent on our website.\n\n```Ruby\nself.custom_pages = [\n  { name: 'homepage', title: 'Home', deletable: true, view_template: 'homepage' }\n]\n```\n\nI'd rather set `deletable: true`, in case there is a bug and we get two or more homepages...\n\n## Creating the Spina Views\n\nWe are going to create a blog similar to the one that I currently have. It's done with the [Butane theme for Jekyll](https://github.com/alexcarpenter/butane-jekyll-theme) created by [Alex Carpenter](http://alexcarpenter.me/) with some adjustments that I have done (adding excerpts and covers).\n\nThis is what you should get at the end.\n\n![Butane Spina Theme](../static/tutorial-blog.png \"Butane Spina Theme\")\n\nTo achieve this you will need to create the following files:\n\n* app/views/layouts/lemonsky/application.html.haml\n* app/views/labs\n  * /pages/homepage.html.haml\n  * /pages/show.html.haml\n  * /pages/custom.html.haml\n  * /shared/_footer.html.haml\n  * /shared/_navigation.html.haml\n\nNow that the views exist, you can actually go and create your pages in your Admin Panel and get your app to work. However your pages won't show anything. Here I am just going to show you specific examples to show you how things work on Spina, for the rest I will invite you to download the sources attached to this article.\n\n### Listing the articles with ancestry\n\nEverything you need to display is contained in the `@page` variable. Also Spina is based on ancestry to handle your pages tree. You can use it like this:\n\n_homepage.html.haml_\n```Haml\n%section.c-archives\n  %ul.c-archives__list\n    - @page.children.each do |child|\n      - if child == @page.children.first\n        - this_year = child.created_at.strftime(\"%Y\")\n        %h2.c-archives__year= this_year\n      - else\n        - next_year = child.created_at.strftime(\"%Y\")\n        - if this_year != next_year\n          %h2.c-archives__year= next_year\n      %li.c-archives__item\n        %h3= link_to child.title, child.materialized_path\n        %p= child.created_at.strftime(\"%b %-d, %Y\")\n        .n-post-excerpt= child.content(:excerpt).try(:html_safe)\n```\n\n[Here is the list of all the methods you can use to navigate your tree.](https://github.com/stefankroes/ancestry#navigating-your-tree)\n\nTo get the full code for this theme you can go and [download the sources here](https://github.com/nicolasthy/Spina-Butane-Theme)!\n\n### Bonus: Creating a breadcrumb\n\nHere is another example of how you can manipulate your tree using ancestry in Spina\n```Haml\n%ol.breadcrumb\n  %li\n    = link_to \"Home\", root_url\n  - @page.ancestors.each do |ancestor|\n    %li\n      = link_to ancestor.menu_title, ancestor.materialized_path\n  %li.active\n    %a = @page.menu_title\n```\n\n`menu_title` is your Navigation Title in your Advanced tab and the `materialized_path` is in the Search Engine tab when creating / updating a page. The name of these variables can be found when looking into the [source code of Spina](https://github.com/denkGroot/Spina/blob/master/app/views/spina/admin/pages/_form_advanced.html.haml).\n","data":{"title":"Spina: A Ruby on Rails CMS","author":"Nicolas Thiry","tags":["ruby"],"excerpt":"Introduction to a new CMS built on Ruby on Rails. This is a step by step guide to get started with it.","published":true},"isEmpty":false,"excerpt":"Introduction to a new CMS built on Ruby on Rails. This is a step by step guide to get started with it.","readingTime":2,"slug":"2016-03-11-spina-rails-cms"},{"content":"\n<div class=\"alert alert-warning\">\nSpina has been updated a lot since I've written these articles. Commands may have changed since and I will do my best to write new articles on Spina soon !\n</div>\n\nHi, previously we saw [how to install and set up our own theme on Spina]({{site.baseurl}}/spina-rails-cms/). However it just didn't feel like I had a full control of my content and felt the need to override the default behavior of the CMS.\n\nSpina allows you to implement plugins just like on Wordpress, unfortunately I'm no Ruby expert and didn't really understand how I could achieve to create my own plugin. It is however something I am looking forward to do and am currently working on it.\n\nSo here we are, I'd like to modify some behaviors on Spina but I don't want to develop a plugin for it. Actually a plugin would probably not be appropriate for this kind of change. I'd like to set a default `<title>` when I don't specify it in the `SEO <title>` field which would be “{Page title} - {Site name}”. If you have already used Spina you should know that by default it takes the Page Title as the `SEO <title>` when you leave it blank. Why would I need to change this? I could simply go to my layout and append the Site name ! Sure... But what if I don't need the Site Name for a given page? How do I manage to do this? And I would have to set a condition to not to show the Page Title on the homepage since it would only be the Site Name.\n\nThis might not look like the most interesting override to apply to Spina, however it's easy enough to help you understand how it works. You can do whatever you want after this. So let's get started !\n\n## Unlinking the Title and the SEO Title\n\nBy default when setting a title to your page, it creates a `SEO <title>` but this is no longer what we want it to do.\n\nTo do that we will have to recreate the `Page` model and update the part we want to change. Let's look at [Spina's source code for this](https://github.com/denkGroot/Spina/blob/master/app/models/spina/page.rb).\n\nSimply create a new file `app/models/spina/page.rb` and copy paste the code from Spina.\nThen let's change the part we need which is the following:\n\n```Ruby\ndef seo_title\n  read_attribute(:seo_title).blank? ? title : read_attribute(:seo_title)\nend\n```\n\nThat we will be replacing by:\n\n```Ruby{2}\ndef seo_title\n  read_attribute(:seo_title)\nend\n```\n\nNow if you set your `SEO <title>` to blank it won't insert the title of the page instead.\n\n## Displaying our custom page title\n\nThis is the easy part, we just have to set our title in our default layout:\n```Ruby\ntitle = @page.seo_title.present? ? @page.seo_title : \"#{@page.title} - #{current_account.name}\"\n```\n\nThat's it ! The `current_account.name` references the Website name that you may set in your admin panel. Pretty easy don't you think?\n\n\nYou can apply this to any behavior in Spina by simply recreating the desired file at the same location as in Spina's source code and change the line you want.","data":{"title":"Spina Advanced: Overriding","author":"Nicolas Thiry","tags":["ruby"],"excerpt":"Going further with Spina and trying to override it's default behavior to fits our needs.","published":true},"isEmpty":false,"excerpt":"Going further with Spina and trying to override it's default behavior to fits our needs.","readingTime":1,"slug":"2016-03-23-spina-advanced-overriding"},{"content":"\n<div class=\"alert alert-warning\">\nSpina has been updated a lot since I've written these articles. Commands may have changed since and I will do my best to write new articles on Spina soon !\n</div>\n\nHi, I've been very busy lately trying to explore new stuff and I realized it was time to share some of my discoveries. Some of you may want me to write more articles about React but to be honest I've been mainly working on Spina and there is so much to do on it, really enjoying everything about it !\n\nTherefore I'll be starting a project with you guys: Building a blog ! This will allow me to see if the final result could be a viable solution for my own blog. I'll be learning everything on the go, so as soon as I've managed to achieve something I'll share it with you.\n\nIn this article we will take a look at [Bram Jetten's Spina Blog Plugin](https://github.com/Bramjetten/Spina-Blog-Example). I also assume that you have read my previous articles about Spina or at least have a working project with Spina, you can [follow these steps to be up to date]({{site.baseurl}}/spina-rails-cms/) !\n\n<div class=\"alert alert-warning\">\nPlease check your Spina gem version, it needs to be <b>0.9.0</b> or higher to be able to install the blog plugin !\n</div>\n\nSo let's get started !!\n\n## Installing a plugin\n\nUnfortunately Bram's blog plugin example does not have any installation guide yet. However Harm de Wit did publish a [wiki to create your own plugin](https://github.com/denkGroot/Spina/wiki/How-to-create-a-plugin) which helped understand how the installation worked.\n\nFirst of all you need to retrieve the files in the right location (Here I am using a fork of Bram's plugin which is originaly in dutch):\n```Shell\n# run these commands in your rails project\ncd vendor\nmkdir plugins\ncd plugins\ngit clone https://github.com/nicolasthy/Spina-Blog-Example.git spina_blog\n```\n\nOnce you've cloned the file you can add the plugin to your Gemfile and run `bundle install`:\n```Ruby\ngem 'spina_blog', path: 'vendor/plugins'\n```\n\nThis plugin comes with migrations that you need to retrieve in your main app with the following commands:\n```Ruby\nrake spina_blog_engine:install:migrations\nrake db:migrate\n```\n\nYou have now succesfully installed the blog plugin ! Now if you head to your admin panel you should have a new tab for Blog Posts !\n\n![Spina Blog Plugin](../static/blog-admin-plugin.png \"Spina Blog Plugin\")\n\n## Setting up the views\n\nI'm going to build something different than my current blog to be able to completely use the plugin's functionalities. Therefore I'll be using the `/blog` path to display all the blogposts and the `/` path to display a simple landing page.\n\nFirst of all let's create the correct views by overriding the plugin. We need two new files:\n\n  * `/app/views/blogposts/index.html.haml`\n  * `/app/views/blogposts/show.html.haml`\n\nThe controllers already exist and return the correct data, we just have to retrieve them in the new views:\n\n`index.html.haml`\n```Haml\n%ul\n  - @blogposts.all.each do |blog|\n    %li= link_to blog.title, blog.materialized_path\n```\n\n\n`show.html.haml`\n```Haml\n%h1= @blogpost.title\n= @blogpost.content.try(:html_safe)\n```\n\nUnfortunately if you try to access these pages on the `/blog` path, it would not be working.\nThe fix is to add a `custom_page` in your theme for your Blog to be able to add it in the menu and for it to get your theme application layout.\n\n```Ruby\ntheme.custom_pages = [{\n  name:           'homepage',\n  title:          'Homepage',\n  deletable:      false,\n  view_template:  'homepage'\n},\n{\n  name: 'blog',\n  title: 'Blog',\n  deletable: false,\n  view_template: 'homepage'\n}]\n```\n\nNow try accessing your http://localhost:3000/ . You should now see a new item in your Navigation: \"Blog\". Awesome your blog is up and running !!\n\nThe last step is to style your new app. Sadly I won't do a step by step for this part, you're on your own ! :)\nHowever let me know if you would be interested by having a styling tutorial for your Spina Blog app on Twitter ([@nicolasthy](http://twitter.com/home?status=@nicolasthy)).","data":{"title":"Spina Advanced: Building a blog","author":"Nicolas Thiry","tags":["ruby"],"excerpt":"Implementing an existing Spina plugin to create a blog.","published":true},"isEmpty":false,"excerpt":"Implementing an existing Spina plugin to create a blog.","readingTime":1,"slug":"2016-03-23-spina-blog-tutorial"}]},"__N_SSG":true}