{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { processMarkdown, readingTime } from \"../helpers/PostsHelper\";\n\nfunction getPosts() {\n  var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n  var posts = function (context) {\n    var keys = context.keys();\n    var values = keys.map(context);\n    var data = keys.map(function (key, index) {\n      var slug = key.replace(/^.*[\\\\\\/]/, \"\").split(\".\").slice(0, -1).join(\".\");\n      var value = values[index];\n      var post = processMarkdown(value);\n      return _objectSpread({}, post, {\n        readingTime: readingTime(post.content),\n        slug: slug\n      });\n    });\n    return data;\n  }(require.context(\"../posts\", true, /\\.md$/));\n\n  return posts.sort(function (a, b) {\n    return new Date(b.data.created_at) - new Date(a.data.created_at);\n  }).slice(0, count || posts.length);\n}\n\nfunction getPostBySlug(slug) {\n  var data, post;\n  return _regeneratorRuntime.async(function getPostBySlug$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(import(\"../posts/\".concat(slug, \".md\")));\n\n        case 2:\n          data = _context.sent;\n          post = processMarkdown(data);\n          return _context.abrupt(\"return\", post);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n}\n\nexport { getPosts, getPostBySlug };","map":null,"metadata":{},"sourceType":"module"}