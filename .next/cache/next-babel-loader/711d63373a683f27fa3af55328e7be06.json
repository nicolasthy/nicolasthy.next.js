{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\n/** @jsx jsx */\nimport { useState } from \"react\";\nimport { css, jsx } from \"@emotion/core\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\nimport * as themes from \"react-syntax-highlighter/dist/cjs/styles/hljs\";\nimport { useTheme } from \"emotion-theming\";\nimport { Check, Copy } from \"react-feather\";\nimport * as copy from 'copy-to-clipboard';\n\nconst SyntaxHighlight = ({\n  value,\n  language = null\n}) => {\n  const theme = useTheme();\n  const {\n    0: copied,\n    1: setCopied\n  } = useState(false);\n  const lines = language.match(/{([^}]+)}/);\n  const highlights = lines && lines[1].split(\",\").map(highlight => Number.parseInt(highlight));\n  const codeLanguage = lines ? language.replace(language.match(/{([^}]+)}/)[0], \"\") : language;\n\n  const handleCopyToClipboard = () => {\n    copy(value);\n    if (!copied) setCopied(true);\n  };\n\n  const renderCopyLink = () => {\n    if (!copied) return jsx(\"span\", null, jsx(Copy, null), \" Copy to clipboard\");\n    return jsx(\"span\", {\n      css: copyLinkCheckedStyles\n    }, jsx(Check, null), \" Copied!\");\n  };\n\n  return jsx(\"div\", {\n    css: containerStyles\n  }, jsx(\"div\", null, jsx(\"span\", {\n    css: copyLinkStyles,\n    onClick: () => handleCopyToClipboard()\n  }, renderCopyLink()), jsx(\"span\", {\n    css: languageLabelStyles(codeLanguage)\n  }, codeLanguage)), jsx(SyntaxHighlighter, {\n    language: codeLanguage.toLowerCase(),\n    style: themes[theme.posts.syntaxHighlightTheme],\n    customStyle: customStyles,\n    wrapLines: true,\n    lineProps: lineNumber => {\n      let style = {};\n\n      if (highlights && highlights.includes(lineNumber)) {\n        style.backgroundColor = languageHighlightColors[codeLanguage.toLowerCase()].background;\n        style.borderLeft = `3px solid ${languageHighlightColors[codeLanguage.toLowerCase()].border}`;\n      }\n\n      return {\n        style\n      };\n    },\n    css: css`\n                    background: ${theme.posts.syntaxHighlightBackground} !important;\n                    box-shadow: ${theme.posts.itemHoverShadow};\n                `\n  }, value));\n};\n\nconst languageHighlightColors = {\n  html: {\n    background: \"rgba(1, 55, 162, 0.1)\",\n    border: \"rgba(1, 55, 162, 1)\"\n  },\n  css: {\n    background: \"rgba(1, 55, 162, 0.1)\",\n    border: \"rgba(1, 55, 162, 1)\"\n  },\n  javascript: {\n    background: \"rgba(248, 179, 25, 0.1)\",\n    border: \"rgba(248, 179, 25, 1)\"\n  },\n  ruby: {\n    background: \"rgba(255, 49, 91, 0.1)\",\n    border: \"rgba(255, 49, 91, 1)\"\n  }\n};\nconst containerStyles = css`\n    position: relative;\n`;\nconst copyLinkStyles = css`\n    position: absolute;\n    top: 0;\n    left: -10%;\n    margin: 10px 0 0 25px;\n    font-family: \"Poppins\", sans-serif;\n    font-size: 12px;\n    opacity: 0.3;\n    cursor: pointer;\n    transition: opacity 0.2s linear;\n\n    > span {\n        display: flex;\n        align-items: center;\n    }\n\n    svg {\n        width: 16px;\n        margin-right: 10px;\n    }\n\n    &:hover {\n        opacity: 0.6;\n    }\n`;\nconst copyLinkCheckedStyles = css`\n    animation: pop 0.4s ease-out;\n\n    @keyframes pop {\n        from {\n            transform: scale(1);\n        }\n        50% {\n            transform: scale(1.1);\n        }\n        to {\n            transform: scale(1);\n        }\n    }\n`;\n\nconst languageLabelStyles = codeLanguage => css`\n    position: absolute;\n    top: 0;\n    right: -10%;\n    margin: 10px 10px 0 0;\n    padding: 3px 10px;\n    border-radius: 50px;\n    min-width: 45px;\n    font-family: \"Poppins\", sans-serif;\n    font-size: 12px;\n    opacity: 1;\n    color: #fff;\n    text-align: center;\n    background: ${languageHighlightColors[codeLanguage.toLowerCase()].border};\n`;\n\nconst customStyles = {\n  fontSize: \"16px\",\n  lineHeight: 1,\n  fontFamily: \"Menlo\",\n  padding: \"50px 0 15px\",\n  margin: \"25px 0 25px -10%\",\n  borderRadius: \"4px\",\n  width: \"120%\"\n};\nexport default SyntaxHighlight;","map":null,"metadata":{},"sourceType":"module"}