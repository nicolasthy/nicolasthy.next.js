{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { processMarkdown, readingTime } from \"../helpers/PostsHelper\";\n\nfunction getPosts() {\n  var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n  var posts = function (context) {\n    var keys = context.keys();\n    var values = keys.map(context);\n    var data = keys.map(function (key, index) {\n      var slug = key.replace(/^.*[\\\\\\/]/, \"\").split(\".\").slice(0, -1).join(\".\");\n      var value = values[index];\n      var post = processMarkdown(value);\n      return _objectSpread(_objectSpread({}, post), {}, {\n        readingTime: readingTime(post.content),\n        slug: slug\n      });\n    });\n    return data;\n  }(require.context(\"../posts\", true, /\\.md$/));\n\n  return posts.sort(function (a, b) {\n    return new Date(b.data.created_at) - new Date(a.data.created_at);\n  }).slice(0, count || posts.length);\n}\n\nfunction getPostBySlug(_x) {\n  return _getPostBySlug.apply(this, arguments);\n}\n\nfunction _getPostBySlug() {\n  _getPostBySlug = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(slug) {\n    var data, post;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return import(\"../posts/\".concat(slug, \".md\"));\n\n          case 2:\n            data = _context.sent;\n            post = processMarkdown(data);\n            return _context.abrupt(\"return\", post);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getPostBySlug.apply(this, arguments);\n}\n\nexport { getPosts, getPostBySlug };","map":null,"metadata":{},"sourceType":"module"}