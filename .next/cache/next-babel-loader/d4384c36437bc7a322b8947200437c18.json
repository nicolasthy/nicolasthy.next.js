{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    display: block;\\n    text-align: center;\\n    margin: 0 0 40px;\\n    font-size: 12px;\\n    opacity: 0.5;\\n    font-family: \\\"Poppins\\\", sans-serif;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    max-width: 120%;\\n    margin: 40px -10% 20px;\\n    display: block;\\n    position: relative;\\n\\n    img {\\n        opacity: 0;\\n        display: block;\\n        width: 100%;\\n        position: relative;\\n        z-index: 2;\\n    }\\n\\n    &::before,\\n    &::after {\\n        content: \\\"\\\";\\n        position: absolute;\\n        top: 0;\\n        left: 0;\\n        width: 100%;\\n        height: 100%;\\n        background-image: inherit;\\n        background-size: cover;\\n        background-position: center center;\\n    }\\n\\n    &::before {\\n        top: 10px;\\n        filter: blur(25px);\\n        backface-visibility: visible;\\n        transform: scale(1.03) translate3d(0, 0, 0);\\n        z-index: 0;\\n        opacity: \", \";\\n        transition: opacity 0.2 linear;\\n    }\\n\\n    &::after {\\n        z-index: 1;\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useRef, useEffect, useState } from \"react\";\nimport { useTheme } from \"emotion-theming\";\nimport styled from \"@emotion/styled\";\nimport mediumZoom from \"medium-zoom\";\n\nvar PostImage = function PostImage(_ref) {\n  var alt = _ref.alt,\n      src = _ref.src;\n  var imagePreloader = src.replace(src.match(/(?:\\.([^.]+))?$/)[0], \".min\".concat(src.match(/(?:\\.([^.]+))?$/)[0]));\n  var theme = useTheme();\n  var imageRef = useRef();\n\n  var _useState = useState(imagePreloader),\n      image = _useState[0],\n      setImage = _useState[1];\n\n  useEffect(function () {\n    mediumZoom(imageRef.current);\n    var imageFull = new Image();\n\n    imageFull.onload = function () {\n      setImage(imageFull);\n    };\n\n    imageFull.src = src;\n    return function () {\n      imageFull.onload = null;\n    };\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(StyledImage, {\n    theme: theme,\n    style: {\n      backgroundImage: \"url(\".concat(image.src || image, \")\"),\n      transition: '0.5s filter linear',\n      filter: \"\".concat(image.src ? '' : 'blur(25px)')\n    }\n  }, __jsx(\"img\", {\n    ref: imageRef,\n    alt: alt,\n    src: image.src || image\n  })), __jsx(StyledAlt, null, alt));\n};\n\nvar StyledImage = styled.span(_templateObject(), function (_ref2) {\n  var theme = _ref2.theme;\n  return theme.posts.imageShadowOpacity;\n});\nvar StyledAlt = styled.span(_templateObject2());\nexport default PostImage;","map":null,"metadata":{},"sourceType":"module"}