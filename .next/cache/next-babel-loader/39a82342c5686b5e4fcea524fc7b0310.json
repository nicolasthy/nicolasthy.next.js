{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n    position: absolute;\\n    top: 0;\\n    right: -10%;\\n    margin: 10px 10px 0 0;\\n    padding: 3px 10px;\\n    border-radius: 50px;\\n    min-width: 45px;\\n    font-family: \\\"Poppins\\\", sans-serif;\\n    font-size: 12px;\\n    opacity: 1;\\n    color: #fff;\\n    text-align: center;\\n    background: \", \";\\n\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n    animation: pop 0.4s ease-out;\\n\\n    @keyframes pop {\\n        from {\\n            transform: scale(1);\\n        }\\n        50% {\\n            transform: scale(1.1);\\n        }\\n        to {\\n            transform: scale(1);\\n        }\\n    }\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    position: absolute;\\n    top: 0;\\n    left: -10%;\\n    margin: 10px 0 0 25px;\\n    font-family: \\\"Poppins\\\", sans-serif;\\n    font-size: 12px;\\n    opacity: 0.3;\\n    cursor: pointer;\\n    transition: opacity 0.2s linear;\\n\\n    > span {\\n        display: flex;\\n        align-items: center;\\n    }\\n\\n    svg {\\n        width: 16px;\\n        margin-right: 10px;\\n    }\\n\\n    &:hover {\\n        opacity: 0.6;\\n    }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    position: relative;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n                    background: \", \" !important;\\n                    box-shadow: \", \";\\n                \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\n/** @jsx jsx */\nimport { useState } from \"react\";\nimport { css, jsx } from \"@emotion/core\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\nimport * as themes from \"react-syntax-highlighter/dist/cjs/styles/hljs\";\nimport { useTheme } from \"emotion-theming\";\nimport { Check, Copy } from \"react-feather\";\nimport * as copy from 'copy-to-clipboard';\n\nvar SyntaxHighlight = function SyntaxHighlight(_ref) {\n  var value = _ref.value,\n      _ref$language = _ref.language,\n      language = _ref$language === void 0 ? null : _ref$language;\n  var theme = useTheme();\n\n  var _useState = useState(false),\n      copied = _useState[0],\n      setCopied = _useState[1];\n\n  var lines = language.match(/{([^}]+)}/);\n  var highlights = lines && lines[1].split(\",\").map(function (highlight) {\n    return Number.parseInt(highlight);\n  });\n  var codeLanguage = lines ? language.replace(language.match(/{([^}]+)}/)[0], \"\") : language;\n\n  var handleCopyToClipboard = function handleCopyToClipboard() {\n    copy(value);\n    if (!copied) setCopied(true);\n  };\n\n  var renderCopyLink = function renderCopyLink() {\n    if (!copied) return jsx(\"span\", null, jsx(Copy, null), \" Copy to clipboard\");\n    return jsx(\"span\", {\n      css: copyLinkCheckedStyles\n    }, jsx(Check, null), \" Copied!\");\n  };\n\n  return jsx(\"div\", {\n    css: containerStyles\n  }, jsx(\"div\", null, jsx(\"span\", {\n    css: copyLinkStyles,\n    onClick: function onClick() {\n      return handleCopyToClipboard();\n    }\n  }, renderCopyLink()), jsx(\"span\", {\n    css: languageLabelStyles(codeLanguage)\n  }, codeLanguage)), jsx(SyntaxHighlighter, {\n    language: codeLanguage.toLowerCase(),\n    style: themes[theme.posts.syntaxHighlightTheme],\n    customStyle: customStyles,\n    wrapLines: true,\n    lineProps: function lineProps(lineNumber) {\n      var style = {};\n\n      if (highlights && highlights.includes(lineNumber)) {\n        style.backgroundColor = languageHighlightColors[codeLanguage.toLowerCase()].background;\n        style.borderLeft = \"3px solid \".concat(languageHighlightColors[codeLanguage.toLowerCase()].border);\n      }\n\n      return {\n        style: style\n      };\n    },\n    css: css(_templateObject(), theme.posts.syntaxHighlightBackground, theme.posts.itemHoverShadow)\n  }, value));\n};\n\nvar languageHighlightColors = {\n  html: {\n    background: \"rgba(1, 55, 162, 0.1)\",\n    border: \"rgba(1, 55, 162, 1)\"\n  },\n  css: {\n    background: \"rgba(1, 55, 162, 0.1)\",\n    border: \"rgba(1, 55, 162, 1)\"\n  },\n  javascript: {\n    background: \"rgba(248, 179, 25, 0.1)\",\n    border: \"rgba(248, 179, 25, 1)\"\n  },\n  ruby: {\n    background: \"rgba(255, 49, 91, 0.1)\",\n    border: \"rgba(255, 49, 91, 1)\"\n  }\n};\nvar containerStyles = css(_templateObject2());\nvar copyLinkStyles = css(_templateObject3());\nvar copyLinkCheckedStyles = css(_templateObject4());\n\nvar languageLabelStyles = function languageLabelStyles(codeLanguage) {\n  return css(_templateObject5(), languageHighlightColors[codeLanguage.toLowerCase()].border);\n};\n\nvar customStyles = {\n  fontSize: \"16px\",\n  lineHeight: 1,\n  fontFamily: \"Menlo\",\n  padding: \"50px 0 15px\",\n  margin: \"25px 0 25px -10%\",\n  borderRadius: \"4px\",\n  width: \"120%\"\n};\nexport default SyntaxHighlight;","map":null,"metadata":{},"sourceType":"module"}